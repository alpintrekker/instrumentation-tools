import struct
import serial
import time


ser = serial.Serial('/dev/ttyUSB0', 38400)

a = ser.read(ser.inWaiting())
b = struct.unpack('B'*len(a), a)
b
# for i in list(b):
#     if (i & 3) == 7:
#         print i

delim = struct.pack('BB', 0, 0)
vala = a.split(delim)
vala


vala = [
        '\x80\x80\x80\x80\xf8\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xffx\xfe\x80\xf8\xf8\xf8\x80',
        '\x80\x80\x80\x80\xf8\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xffx\xfe\x80\xf8\xf8\xf8\x80',
        '\x80\x80\x80\x80\xf8\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xffx\xfe\x80\xf8\xf8\xf8\x80',
        '\x80\x80\x80\x80\xf8\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xffx\xfe\x80\xf8\xf8\xf8\x80',
        '\x80\x80\x80\x80\xf8\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xffx\xfe\x80\xf8\xf8\xf8\x80',
        '\x80\x80\x80\x80\xf8\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xffx\xfe\x80\xf8\xf8\xf8\x80',
        '\x80\x80\x80\x80\xf8\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x80\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\xf8\x80',
        '\x80\x80x\x00\xff\x80\x00\xf8\xf8\x00\xf8'
        ]

def vizgalodas(addr):
        for i in vala:
            baba = struct.unpack(len(i)*'B', i)
            for j in list(baba):
                if (j & 0b1111) == addr:
                    print i,j
                    print format(j, '#010b')



while True:
    try:
        a = ser.read(ser.inWaiting())
        print len(a)
        time.sleep(1)
    except KeyboardInterrupt:
        break


def addresses(b):
    addrs = []
    for i in b:
        bits_7_6 = (i & (0b11 << 6)) >> 6
        bits_5_4 = (i & (0b11 << 4)) >> 4
        bits_3_0 = i & 0b1111
        if bits_7_6 == 0b11:
            addr = bits_3_0
            print format(i, '#010b')
            if bits_3_0 not in addrs:
                addrs.append(bits_3_0)
    return addrs

addresses(b)


addrs = []
for i in b:
    # if (i & 0b11000000) == 0b11000000:
    # addr = i & 0b1111
    print format(i, '#010b')
        # if addr not in addrs:
        #     addrs.append(addr)